controller-1  | 2025-01-13 15:36:14.718+0000 [id=31]    #SEVERE  jenkins.InitReactorRunner$1#onTaskFailed: Failed Loading plugin Git plugin v5.7.0 (git)
controller-1  | java.io.IOException: Failed to load: Git plugin (git 5.7.0)
controller-1  |  - Update required: Credentials Plugin (credentials 1393.v6017143c1763) to be updated to 1405.vb_cda_74a_f8974 or higher

{
domin rote53[commit changes]
module "s3_bucket_for_logs" {
  source = "terraform-aws-modules/s3-bucket/aws"

  bucket = "my-s3-bucket-for-logs"
  acl    = "log-delivery-write"

bucket version(t53)
bucket policy =obj.terraform
  # Allow deletion of non-empty bucket
  force_destroy = true
  control_object_ownership = true
  object_ownership         = "ObjectWriter"

  attach_elb_log_delivery_policy = true  # Required for ALB logs
  attach_lb_log_delivery_policy  = true  # Required for ALB/NLB logs
https://www.sonatype.com/products/sonatype-nexus-repository
}
}
update policy: bytes=64,ip=14.80.113.128/24
ttl:48 
Repo:nexus
else 
create tags {
for (Object objKey : tmpHM.keySet()) {
   HashMap objHM = (HashMap) list.get(objKey);
}
install hashicop
install artifacts{
else
return (true)
update policy :  bytes=64,ip=14.80.113.128/32
ttl:78ms
else 
s3_bucket=obj.txtfile
sonatype:nexus
inputs = {
  bucket    = "foobar"            # `bucket` has type `string`, no need to jsonencode()
  cors_rule = jsonencode([...])   # `cors_rule` has type `any`, so `jsonencode()` is required
}
"has-property-descriptors@1.0.2": {
      "integrity": "sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==",
      "dependencies": [
        "es-define-property"
      ]
    },
-  Lamda fuctions on AWS domain ...
-  #Use Route53 to domanin controller//
-  Terraform ...
-   ...
-  Git_facts: ...
git_URL:https://github.com/jenkinsci/jenkins-prototype
Route53_ip::18.220.181.71/32
route[packets
00010010
11011100
10110101
01000111]
wget -O - https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
sudo apt update && sudo apt install terraform
<!---
terraform 'update'
terraform 'destroy'
terraform 'validate'
sh terraform 'add:vi_editer
--->
instance_type:ec2_t5.medium

use:ubantu/redhhat/cli
ip:17.200.567/64
64 bytes
sudo yum upgrade

 for Java Installation 
     sudo dnf install java-11-amazon-corretto -y

sudo yum install jenkins -y

sudo systemctl start jenkins

sudo systemctl status jenkins

sudo cat /var/lib/jenkins/secrets/initialAdminPassword
corn exp:H 4 12 * 6;
else
return time stamp
name: Auto Tag Release on Version Change

on:
  workflow_dispatch:
  push:
    branches:
      - master
    paths:
      - "deno.json"

jobs:
  auto-tag:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.CR_PAT }}

      - name: Get version from deno.json
        id: get_version
        run: |
          VERSION=$(jq -r .version deno.json)
          if ! git ls-remote --tags origin | grep -q "refs/tags/v${VERSION}"; then
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "Version found: $VERSION"
          else
            echo "Version already exists: $VERSION"
          fi

      - name: Create Git Tag
        if: steps.get_version.outputs.version != ''
        run: |
          git tag v${{ steps.get_version.outputs.version }}
          git push origin v${{ steps.get_version.outputs.version }}

      - name: Create GitHub Release
        if: steps.get_version.outputs.version != ''
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: Release v${{ steps.get_version.outputs.version }}
          body: |
            ðŸ¤– GitHub App: [Pull](https://github.com/apps/pull)
          draft: false
   prerelease: ${{ contains(steps.get_version.outputs.version, 'alpha') || contains(steps.get_version.outputs.version, 'beta') 
   || contains(steps.get_version.outputs.version, 'rc') 
 bpftool-5.4.290-205.405.amzn2

kernel-5.4.290-205.405.amzn2

kernel-devel-5.4.290-205.405.amzn2

kernel-headers-5.4.290-205.405.amzn2

kernel-tools-5.4.290-205.405.amzn2

kernel-tools-devel-5.4.290-205.405.amzn2

perf-5.4.290-205.405.amzn2

python-perf-5.4.290-205.405.amzn2

AllowPassRoleToAutoscaling
{
    PermissionsToCreateEKSAndKubernetesTags
    RemoveRoleFromInstanceProfile()
    StringEqualsIfExists
    PermissionsToCreateAndManageInstanceProfiles()
    PutScheduledUpdateGroupAction
    TerminateInstanceInAutoScalingGroup()
    TagKeys(1078);
    LaunchTemplateRelatedPermissions()
    autoScalingGroupName()
    String("AWSServiceName"= AllowPassRoleToAutoscaling)
    true
   {
export PATH=/srv/releases/.bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
   }
  ðŸ¤– GitHub App: [Pull](https://github.com/apps/pull)
createAutoScaling( PermissionsToCreateEKSAndKubernetesTags
    RemoveRoleFromInstanceProfile()
    StringEqualsIfExists
    PermissionsToCreateAndManageInstanceProfiles())
    





